buildscript {
  ext {
    javaVersion = "1.8"
    slf4jVersion = "1.7.25"
    kotlinVersion = "1.2.31"
    jacksonVersion = "2.9.5"
    junitJupiterVersion = "5.0.2"
    junitPlatformVersion = "1.0.2"
  }
  repositories {
    mavenLocal()
    mavenCentral()
  }
  dependencies {
    classpath("org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion")
  }
}

plugins {
  id "idea"
  id "java"
  id "eclipse"
  id "application"
  id "maven-publish"
  id "org.jetbrains.kotlin.jvm" version "1.2.31"
  id "org.jetbrains.kotlin.plugin.noarg" version "1.2.31"
  id "org.jetbrains.kotlin.plugin.allopen" version "1.2.31"
  id "com.github.johnrengelman.shadow" version "2.0.2"
}

apply plugin: "org.junit.platform.gradle.plugin"

compileKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

compileTestKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

group = "daggerok"
version = "0.0.1"
sourceCompatibility = targetCompatibility = "$javaVersion"

mainClassName = "daggerok.AppKt"
shadowJar.mustRunAfter jar

defaultTasks "clean", "build", "installDist", "distZip", "publish"

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  compile("org.slf4j:slf4j-api:$slf4jVersion")
  compile("org.slf4j:jul-to-slf4j:$slf4jVersion")
  compile("org.slf4j:log4j-over-slf4j:$slf4jVersion")
  compile("ch.qos.logback:logback-classic:1.2.3")
  compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
  compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
  compile("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
  compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
  compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion")
  testCompile("org.jetbrains.kotlin:kotlin-test:$kotlinVersion")
  testCompile("junit:junit:4.12")
  testImplementation("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
  testImplementation("org.hamcrest:hamcrest-core:1.3")
  testRuntime("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
  testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
  testRuntime("org.junit.vintage:junit-vintage-engine:4.12.3")
  testRuntime("org.junit.platform:junit-platform-launcher:$junitPlatformVersion")
  testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')
}

publishing {
  publications {
    shadow(MavenPublication) { publication ->
      project.shadow.component(publication)
    }
  }
  repositories {
    maven {
      url "$buildDir/maven-publish"
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "4.6"
  distributionType = "ALL"
}

idea {
  module {
    downloadSources = true
  }
}

eclipse {
  classpath {
    downloadSources = true
  }
}
